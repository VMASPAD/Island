{"name":"island","type":"registry:ui","dependencies":["class-variance-authority"],"files":[{"path":"components/ui/islnd.tsx","content":"\"use client\"\\nimport React, { useState, useEffect } from 'react';\\nimport { cva, type VariantProps } from \\\"class-variance-authority\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\nconst IslandVariants = cva(\\n  \\\"flex items-center  text-secondary rounded-lg transition-all duration-700 ease-in-out fixed backdrop-blur-md\\\",\\n  {\\n    variants: {\\n      variant: {\\n        default: \\\"bg-primary\\\",\\n        destructive: \\\"bg-destructive\\\",\\n        outline: \\\"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\\\",\\n        secondary: \\\"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/60\\\",\\n        ghost: \\\"hover:bg-accent hover:text-accent-foreground\\\",\\n        link: \\\"text-primary underline-offset-4 hover:underline\\\",\\n      },\\n      size: {\\n        default: \\\"\\\",\\n        sm: \\\"h-8 rounded-md px-3 text-xs\\\",\\n        lg: \\\"h-10 rounded-md px-8\\\",\\n      },\\n      position: {\\n        top: \\\"top-[3%] left-1/2 transform -translate-x-1/2\\\",\\n        bottom: \\\"bottom-[3%] left-1/2 transform -translate-x-1/2\\\",\\n        left: \\\"left-[3%] top-1/2 transform -translate-y-1/2\\\",\\n        right: \\\"right-[3%] top-1/2 transform -translate-y-1/2\\\",\\n      },\\n    },\\n    defaultVariants: {\\n      variant: \\\"default\\\",\\n      size: \\\"default\\\",\\n      position: \\\"bottom\\\",\\n    },\\n  }\\n);\\n\\ninterface IslandProps extends VariantProps<typeof IslandVariants> {\\n  distance?: number;\\n  className?: string;\\n  children: React.ReactNode;\\n}\\n\\nconst Island = ({ children, distance = 70, position = \\\"bottom\\\", className, variant, size }: IslandProps) => {\\n  const [isVisible, setIsVisible] = useState(false);\\n  const [isMouseInside, setIsMouseInside] = useState(false);\\n\\n  useEffect(() => {\\n    const handleMouseMove = (event: MouseEvent) => {\\n      const { clientX, clientY } = event;\\n      const { innerWidth, innerHeight } = window;\\n      const threshold = distance;\\n\\n      switch (position) {\\n        case \\\"top\\\":\\n          setIsVisible(clientY <= threshold);\\n          break; \\n        case \\\"bottom\\\":\\n          setIsVisible(innerHeight - clientY <= threshold);\\n          break;\\n        case \\\"left\\\":\\n          setIsVisible(clientX <= threshold);\\n          break;\\n        case \\\"right\\\":\\n          setIsVisible(innerWidth - clientX <= threshold);\\n          break;\\n        default:\\n          setIsVisible(false);\\n      }\\n    };\\n\\n    window.addEventListener('mousemove', handleMouseMove);\\n    return () => window.removeEventListener('mousemove', handleMouseMove);\\n  }, [distance, position]);\\n\\n  const getTransformClass = () => {\\n    switch (position) {\\n      case \\\"top\\\":\\n        return isVisible || isMouseInside ? 'translate-y-0' : '-translate-y-full';\\n      case \\\"bottom\\\":\\n        return isVisible || isMouseInside ? 'translate-y-0' : 'translate-y-full';\\n      case \\\"left\\\":\\n        return isVisible || isMouseInside ? 'translate-x-0' : '-translate-x-full';\\n      case \\\"right\\\":\\n        return isVisible || isMouseInside ? 'translate-x-0' : 'translate-x-full';\\n      default:\\n        return '';\\n    }\\n  };\\n\\n  return (\\n    <div\\n      className={cn(\\n        IslandVariants({ variant, size, position, className }),\\n        'z-10',\\n        isVisible || isMouseInside ? 'opacity-100' : 'opacity-0',\\n        getTransformClass(),\\n        'transition-all duration-700 ease-in-out'\\n      )}\\n      onMouseEnter={() => setIsMouseInside(true)}\\n      onMouseLeave={() => setIsMouseInside(false)}\\n    >\\n      {children}\\n    </div>\\n  );\\n};\\n\\nexport default Island;","type":"registry:ui","target":""}]}
